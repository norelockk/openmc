plugins {
    id 'java'
    id("xyz.jpenilla.run-paper") version "2.3.1"
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

group = 'pl.openmc'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
}

dependencies {
    compileOnly("io.papermc.paper:paper-api:1.20.1-R0.1-SNAPSHOT")
    compileOnly("net.luckperms:api:5.4")
}

tasks {
    runServer {
        // Configure the Minecraft version for our task.
        // This is the only required configuration besides applying the plugin.
        // Your plugin's jar (or shadowJar if present) will be used automatically.
        minecraftVersion("1.20")
    }
}

def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
    filesMatching('auth-plugin.yml') {
        expand props
    }
}

// Core plugin configuration
task coreJar(type: com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar) {
    archiveBaseName.set('OpenMCCore')
    from sourceSets.main.output
    configurations = [project.configurations.runtimeClasspath]
    exclude 'pl/openmc/auth/**'
    
    manifest {
        attributes(
            'Implementation-Title': 'OpenMCCore',
            'Implementation-Version': version
        )
    }
    
    // Copy plugin.yml
    from('src/main/resources/plugin.yml')
}

// Auth plugin configuration
task authJar(type: com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar) {
    archiveBaseName.set('OpenMCAuth')
    from sourceSets.main.output
    configurations = [project.configurations.runtimeClasspath]
    include 'pl/openmc/auth/**'
    include 'pl/openmc/core/api/**'
    
    manifest {
        attributes(
            'Implementation-Title': 'OpenMCAuth',
            'Implementation-Version': version
        )
    }
    
    // Rename auth-plugin.yml to plugin.yml
    rename 'auth-plugin.yml', 'plugin.yml'
    from('src/main/resources/auth-plugin.yml')
}

build.dependsOn coreJar, authJar
